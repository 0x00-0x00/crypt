#!/usr/bin/env python


#   Crypt-Keygen v.0.1
#   Developed by shemhazai
# --------------------------------------
# Description:
#   This program creates an RSA Key Pair and AES secret key
#   To allow the sibling program - crypt - to encrypt files
#   by running scripts, using these keys as substitution to
#   the usual method of password hashing for key.
#

#
#  CONFIGURATION VARIABLES
#       SYMMETRIC ENCRYPTED KEY FILE: ~/.crypt/secret.key
#       ASSYMETRIC KEYS LOCATION: USER DEFINED IN ~/.crypt/crypt.conf


import argparse

#  Import program modules
from shemcrypt.configuration import get_private_key_location, setup_full, home, config_file, \
    secret_key_file
from shemcrypt.shred import shred_file
from shemcrypt.key import *
from shemcrypt.pem import *

#  Import program external modules
from shemutils.logger import Logger
from shemutils.encryption import RSA
from shemutils.checksum import Checksum
from sys import exit

import base64
import os
import subprocess


'# Static Data '
keys = {
        "public": ".pub.key",
        "private": ".priv.key"
    }

logger = Logger("crypt-keygen")


def clean_all():
    try:
        files = [config_file, secret_key_file]
        for fd in files:
            if os.path.exists(fd):
                shred_file(fd)
    except Exception as e:
        logger.error("Error: {0}".format(e))
        return e
    return 0


def check_keys_exists(key_location):
    for key in keys:
        if not os.path.isfile(key_location + os.sep + keys[key]):
            return -1
    return 0


def write_symmetric_key(r, secret_file=secret_key_file):
    """
    This function will use its own RNG to generate a cryptographic key.
    :param r: RSA Object from ShemUtils
    :param secret_file: os.path
    :return: Integer -> 0
    """
    key_obj = Key(32)  # generate the key
    key_obj.new()
    key = key_obj.get()  # return the key to a variable

    if key is None or key is "":
        print("[!] Error: Could not generate a key.")
        exit(1)

    cipher = r.encrypt_message(key, v=False)
    with open(secret_file, "wb") as f:
        f.write(pem_header.encode())
        f.write(base64.b64encode(cipher))
        f.write(pem_footer.encode())

    # Generate a SHA256 hash of the RSA-encrypted key-file and store it on the configuration folder
    check = Checksum(secret_file, "sha256")
    with open(secret_file + ".sha256", "wb") as f:
        f.write(check.get().encode())
    return 0


def generate_keys(path, priv=keys["private"], pub=keys["public"]):
    """
    Write the keys into a non-generic path.
    Used to storage of keys, not intentional for generic-use.
    """
    if not os.path.exists(path):
        logger.critical("This folder does not exists.")
        return -1

    priv_f = os.path.join(path, priv)
    pub_f = os.path.join(path, pub)
    secret_file = os.path.join(path, "secret_key")

    if os.path.exists(priv_f) or os.path.exists(pub_f):
        logger.critical("Key file exists already.")
        return -1

    rsa = RSA()
    rsa.generate_keypair()
    rsa.save_keys(priv_f=priv_f, pub_f=pub_f)
    if write_symmetric_key(rsa, secret_file=secret_file):
        logger.critical("Could not write the symmetric key.")
        return -1
    return 0


def keyfile_hash_verification():
    """
    check1 -> Extracts the current sha256 from secret_key file
    check2 -> Reads the past sha256 from secret_key file
    :return: -1 for IO error, 0 for success or 1 for hash difference
    """
    try:
        check1 = Checksum(secret_key_file, "sha256").get()
        check2 = open(secret_key_file + ".sha256", "rb").read().decode()
    except Exception as e:
        logger.error("Checksum check error: {0}".format(e))
        return -1

    if check1 == check2:
        return 0

    logger.debug("Checksum 1: {0}".format(check1))
    logger.debug("Checksum 2: {0}".format(check2))
    return 1


def main():
    parser = argparse.ArgumentParser()
    parser.add_argument("--clean", action="store_true", required=False, help="Clean configuration file;")
    parser.add_argument("--check", action="store_true", required=False, help="Check key location and hashes;")
    parser.add_argument("--to-path", type=str, required=False, help="Overrides the location where the key is going to "
                                                                    "be stored.")
    args = parser.parse_args()

    if args.to_path is not None:
        if not generate_keys(args.to_path):
            logger.info("Keys successfully generated and stored at {0}".format(args.to_path))
            return 0

    if args.clean is True:
        if clean_all():
            logger.error("Error cleaning configuration files and secret key.")
            return -1
        return 0

    #  Set-up folder structure
    if setup_full():
        logger.error("Folder structure error")
        return -1

    # Get key location
    key_location = get_private_key_location()
    logger.info("Key location: {0}".format(key_location))
    if not key_location:
        logger.error("Private key location error")
        return -1
    else:
        if not os.path.isdir(key_location):
            logger.error("Private key location is not a directory.")
            return -1

    rsa_obj = RSA()
    priv_f = key_location + keys["private"]
    pub_f = key_location + keys["public"]
    if check_keys_exists(key_location) != 0:
        '# Create keys'
        rsa_obj.generate_keypair()
        rsa_obj.save_keys(priv_f=priv_f, pub_f=pub_f)
        write_symmetric_key(rsa_obj)  # write symmetric key under RSA encryption
    else:
        '# Keys already exists. Checking if symmetric key exists... '
        if not os.path.isfile(secret_key_file):  # symmetric key does not exists? trash all the
            # asymmetric keys and configurations
            os.remove(priv_f)
            os.remove(pub_f)
            if os.path.exists(config_file):
                os.remove(config_file)
            logger.info("Type 'crypt-keygen' again to generate a new pair of keys.")
            return -1
        else:
            #  Compares hash of secret file from stored in conf folder

            #  h_st stands for Hash State
            h_st = keyfile_hash_verification()
            if h_st != 0:
                logger.error("secret_key file sha256 hash differs from original key hash")
                return 1
            elif h_st == 0:
                logger.info("Secret key file: {0}".format(secret_key_file))
                logger.info("Private key location: {0}".format(key_location))
                logger.info("Everything is ok.")

    return 0


if __name__ == "__main__":
    main()
