#!/usr/bin/env python
# coding:utf-8
from argparse import ArgumentParser
from shemcrypt.crypter import Crypter
from shemcrypt.module_check import *
from shemutils.logger import Logger
from time import time
from sys import stdout, stderr


__VERSION__ = '1.9.8'
__author__ = "zc00l"
__revision__ = '2017/03/08'
logger = Logger("CRYPT")

write = stdout.write
flush = stdout.flush
errwrite = stderr.write


def header():
    errwrite("[crypt v. %s\n" % __VERSION__)
    errwrite("revision: %s\n" % __revision__)


def main():
    header()
    t1 = time()

    parser = ArgumentParser()

    core_group = parser.add_argument_group("CORE")
    file_group = parser.add_argument_group("FILE")
    mesg_group = parser.add_argument_group("MESG")

    core_group.add_argument("--encrypt", dest="encrypt", action="store_true", help="Set operation mode to Encryption")
    core_group.add_argument("--decrypt", dest="decrypt", action="store_true", help="Set operation mode to Decryption")
    core_group.add_argument("-b", "--bits", help="Key size in bits. Options: 128, 256", default=256, type=int)
    core_group.add_argument("-v", "--verbose", help="Verbose mode.", action="store_true")
    core_group.add_argument("-u", "--unique", help="Removes encrypted file when decrypts, remove unencrypted file"
                                                   " when encrypting", action="store_true")
    core_group.add_argument("-k", "--keyfile", action="store_true", help="Secret Key File to use instead "
                                                                         "of password hashing.")
    core_group.add_argument("-nc", "--no-check", action="store_true",
                            help="Disables integrity check of encrypted files.")
    core_group.add_argument("-c", "--compress", action="store_true",
                            help="Compress/decompress the data before encryption.")
    file_group.add_argument("-f", "--file", help="File to be de/encrypted.", nargs='+', type=FileType('rb+'))
    mesg_group.add_argument("-m", "--msg", help="Message to be de/encrypted")

    args = parser.parse_args()

    Crypter(args)

    t2 = time()

    if args.verbose:
        print("Process duration: %.2f seconds" % format_time(float(float(t2) - float(t1))))

    return


if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        m = Logger("MAIN")
        m.critical("Interrupt signal detected.")
        exit(0)
